{"noir_version":"0.31.0+540bef3597bd3e5775c83ec2ee3c0d4463084b4c","hash":395606967573391717,"abi":{"parameters":[{"name":"inputs","type":{"kind":"array","length":65,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"5dzBasJAFEbhd5m1i8zMvXMneZVSStRYAhJFY6FI372xNVJoqYtCF3N2xvyIZ+WHmpzduluenp/6YbM7uubh7La7VTv2u2E6Orvq46njvh0uR8exPYyu8aleuG5YuyZU9rZwm37buUamh9+mMdl1KlW+TUP+aWoWrttotf4+9ip6HXtN6c640tvYV/J1/LhwvvzEUH5iLD9Ryk/U8hNT+YlWfmIuP7EGfPQTeAPwjQcAxwOE4wXQCDCOByDHA5TjAczxAOcEgHMC4XscgHMCwDlBAI0A5wSAcwLAOQHgnABwTgQ4JwKcEwk/WAGcEwXQCHBOBDgnApwTAc6JAOcIwDkCcI4AnCOEf+YIoBHgHAE4RwDOEYBzBOAcBThHAc5RgHMU4BwVQCPAOQpwjgKcowDnKMA5CeCcBHBOAjgnAZyTBNBIuNYK4JwEcE4COCcBnGMA5xjAOQZwjgGcYwJoBDjHCBeVA5xjAOcYwDkZ4JwMcE7+R+eIr+eXleDvNIac4vwecpY/NUZAo5TeOB28tIe+XW67y327LudOw2q+jdd0OL7uP89M23c=","file_map":{"28":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<N>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<N>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"47":{"source":"use std::hash::poseidon2;\n\n/**\n* @notice Poseidon2 Hash used in most of the current circuit with 65 inputs\n*/\nfn main(inputs: [Field; 65]) -> pub Field {\n    let hash = poseidon2::Poseidon2::hash(inputs, 65);\n\n    hash\n}\n","path":"/Users/anoy/Documents/Hackathon Projects/fusion-circuits/p2_hash_65/src/main.nr"}},"names":["main"]}