{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":4333001175098737337,"abi":{"parameters":[{"name":"inputs","type":{"kind":"array","length":65,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":65}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[216],"error_types":{}},"bytecode":"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","debug_symbols":"5dzBasJAFEbhd5l1Fs7MvXPHvEopJWosAYmisVDEd2/SqhRa7KLgYs5y9Ac9Kz/U5ORW7eL4+tL16+3B1U8nt9kum6Hb9uPp5GafDx12TT+dDkOzH1ztTSrX9itXBx/OlVt3m9bVks7Vj2kUu0xjzrdpyL9NTcN1a6b3x16DXsZep1e+O57F23iW5fv4uXK+/MRQfmIsP1HKT9TyE1P5iVZ+Yi4/cQ746CfwBuAbDwCOBwjHC6ARYBwPQI4HKMcDmOMBzgkA5wTC9zgA5wSAc4IAGgHOCQDnBIBzAsA5AeCcCHBOBDgnEn6wAjgnCqAR4JwIcE4EOCcCnBMBzhGAcwTgHAE4Rwj/zBFAI8A5AnCOAJwjAOcIwDkKcI4CnKMA5yjAOSqARoBzFOAcBThHAc5RgHMSwDkJ4JwEcE4COCcJoJFwrRXAOQngnARwTgI4xwDOMYBzDOAcAzjHBNAIcI4RLioHOMcAzjGAczLAORngnPxA54i3+WUrfv5HY8gSr+8hJ/lXYwQ0SumN4+Gt2XfNYtNO9+2anjv2y+ttvMbj8L77embcfgA=","file_map":{"28":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n\n    pub fn hash<N>(input: [Field; N], message_size: u64) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<N>(input: [Field; N], in_len: u64, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"46":{"source":"use dep::std::hash::poseidon2;\n\n/**\n* @notice Poseidon2 Hash used in most of the current circuit with 65 inputs\n*/\nfn main(inputs: [Field; 65]) -> pub Field {\n    let hash = poseidon2::Poseidon2::hash(inputs, 65);\n\n    hash\n}\n","path":"/Users/anoy/Documents/Hackathon Projects/fusion-circuits/p2_hash_65/src/main.nr"}},"names":["main"]}