{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":942404119016264007,"abi":{"parameters":[{"name":"inputs","type":{"kind":"array","length":32,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":32}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[106],"error_types":{}},"bytecode":"H4sIAAAAAAAA/9VaZ1PbQBR8lPTeIJ0aagDJkmwp1FBDDTXUUAx2Ev7/50zeDo8ZZPIlk70PdzM7OwP2+rTv3Vq+U51cjHNFn1wfdcYTxlFQjONKqVAJo/AkKGTlNAnipFxMwzRM0uSskEZRJY3TUlbOSkEWxlElrCZZVA0uRusVreCfRuHaXzC3ZkXjlfn+tjmD641bjS9f16ZoV3QoOmvej9FQc83B/42wgajVRqzFB968Apf+NRK12on+dXni3w2iVgfRv26if7VZgN7Gmu8y7jbulHwW9Ch65SL7+sV9FtwkavUQa/FR/OjlW0StXqJ/A574d5uo1Uf0b1DcZQF6G2t+wHjQuF/yWTCEz1aEioK4z4I7RK0hYi0i8aOX7xK1AqJ/sSf+3SNqhUT/EnGXBehtrPnYODEuSD4LioqSIlVk4j4L7hO1isRafBI/evkBUatE9G/YE/8eErVSon8j4i4L0NtY88PGI8aZ5LNgVDGmGLe5uM6CR0StUWItPosfvfyYqDVG9G/SE/+eELXGif5NibssQG9jzU8aTxlPSD4LphUzilnFnLjPgqdErWliLb6IH738jKg1Q/Rv3hP/nhO1Zon+LYi7LEBvY83PGy8Yz0k+CxYVS4plxYq4z4IXRK1FYi2+ih+93ETUWiL6t+qJf81ErWWif2viLgvQ21jzq8ZrxiuSz4J1xYZiU7El7rPgJVFrnViLb+JHL78iam0Q/dv2xL/XRK1Non874i4L0NtY89vGO8Zbks+CXcWeYl9xIO6z4A1Ra5dYi+/iRy+/JWrtEf079MS/d0StfaJ/R+IuC9DbWPOHxkfGB5LPgmPFiaKsOBX3WfCeqHVMrMWZ+NHLLUStE6J/FXHXy2fWsxXjsvFpTS9XFT8UPxW/5Hov15NrUSX6d0727/LaW69cf5150GD/x3NXeN4Hz6zguQuc9+PMGueuOO/DmRXOXbDfjz1r7Ltivw97Vth3we/9JqsV7vdxz4r7Lnzf4zsLuYv13lIzB4xz+cv4A+HkHkftKQAA","debug_symbols":"5ZrNaoNAFEbfZdYuvD/jjL5KKcUkpggyhmgKRfLu1VZDoSVdFLK43/I6B/SsPMzM5A7N7vL60qZjP7jqaXJdv6/Htk/zNLn889FwqtMyDWN9Hl1FQTPXpIOrmPiauWPbNa7S4pr9QEXDikqMN5Tjb2jwvLEh+PswefYrTH558104lxucR/0OP2eO7CuyfUWxr6j2Fb19xcK+YrCvGO0rlgC/foS8AegbAggcAigcUgBHgMYhgMghgMohgMwhgM5hgM5hhH0cgM5hgM5hBXAE6BwG6BwG6BwG6BwG6BwB6BwB6BxBOLAC6BxRAEeAzhGAzhGAzpEHdo5SKFdWqfzDkaPK9g2x0H85lvYdNbfuOA9v9bmtd12z3ENa1i5pv11Lmsfx/fS1MrMf","file_map":{"28":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n\n    pub fn hash<N>(input: [Field; N], message_size: u64) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<N>(input: [Field; N], in_len: u64, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"46":{"source":"use dep::std::hash::poseidon2;\n\n/**\n* @notice Poseidon2 Hash used in most of the current circuit with 32 inputs\n*/\nfn main(inputs: [Field; 32]) -> pub Field {\n    let hash = poseidon2::Poseidon2::hash(inputs, 32);\n\n    hash\n}\n","path":"/Users/anoy/Documents/Hackathon Projects/fusion-circuits/p2_hash_32/src/main.nr"}},"names":["main"]}