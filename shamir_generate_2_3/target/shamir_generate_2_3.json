{"noir_version":"0.30.0+af57471035e4fa7eaffa71693219df6d029dbcde","hash":1364287228084465502,"abi":{"parameters":[{"name":"secret","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":64}},"visibility":"private"},{"name":"a1","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":64}},"visibility":"private"}],"param_witnesses":{"a1":[{"start":32,"end":64}],"secret":[{"start":0,"end":32}]},"return_type":{"abi_type":{"kind":"array","length":3,"type":{"kind":"struct","path":"Share","fields":[{"name":"x","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":64}}}]}},"visibility":"public"},"return_witnesses":[291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389],"error_types":{}},"bytecode":"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","debug_symbols":"tZrtShxmFITvZX/7Y8+Zc96P3EopxSSmCLKGaApFcu/dtIYW1JRBn3/ZuO+AMwwPHOfh8PHq/dfff7s+fbq9O7z75eFwc/vh8v769nT+9HAY9ff/3X2+PH3/eHd/+eX+8E5RF4er08fzv3T8dnH4dH1zdXhX49uvF4fR9othv5j2i2W/2O6LebRfhP0i7ReyX9iZTzvzaWc+7cynnfm0M1925svOfNmZLzvzZWe+7MyXnfmyM1925svOfNuZbzvzbWe+7cy3nfm2M9925tvOfNuZbzvzOB79J+E/Sf+J/CflP2n/yfCfTP/J8p/46Yeffvjph59++OmHn3746Yeffvjph59++Omnn3766aeffvrpp59++umnn3766aeffvrpy09ffvry05efvvz05acvP3356ctPX3765adffvrlp19++uWnX3765adffvrlp19++u2n33767afffvrtp99++u2n33767afffvrDT3/46Q8//eGn7x/ywr/khX/KC/+WF/4xL/xrXvjnvPDveeEf9MK/6IV/0gv/phf+US/8q174Z73w73rhH/bCv+yFf9oL/7YX/nEv/Ote+Oe98O974R/4wr/whX/iC//GF88f+XqNxycj9n+fXDz56vn4k4/fPR9C6om+YP2C9RvWH7D+hPUXrL9R/Xz+pvqG+gHrJ6wvWL9g/Yb1B6w/Yf0F68P9Dbi/Afc34P4G3N+A+xtwfwPub8D9Dbi/Afc34f4m3N+E+5twfxPub8L9Tbi/Cfc34f4m3F/B/RXcX8H9Fdxfwf0V3F/B/RXcX8H9FdzfgvtbcH8L7m/B/S24vwX3t+D+FtzfgvtbcH8b7m/D/W24vw33t+H+Ntzf5/9WPjR/6M/j/+mP9a++nuhPWH+9Wv/n/mxW//m/77+dP8+PAd5QP2F/BOsX7E/D+gP2Z8L6C/Zns/rzyPozA9ZP2B/B+gX707A+zN8J83fC/J0wfxfM3wXzd8H8XTB/F8zfBfN3wfxdMH8XzN8F83fD/N0wfzfM3w3zd8P83TB/N8zfDfN3w/zdLH91ZPmrY8D6CfsjWL9gfxrWH7A/E9ZfsD8sfxUsfxUB6yfsj2D9gv1pWH/A/kxYf8H+wPxNmL8J8zdh/ibM34T5mzB/E+ZvwvxNmL8J81cwfwXzVzB/BfNXMH8F81cwfwXzVzB/BfO3YP4WzN+C+Vswfwvmb8H8LZi/BfO3YP4WzN+G+dswfxvmb8P8bZi/DfMX3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l8J3l/phf3V+vE7z4zX+dOw/ni1/s/9mbD+gv3ZrP4L+6s38+eF/dXb6Sfsj2D9gv1pWH/A/kxYf8H+bFS/jkfUnzoGrJ+wP4L1C/anYf0B+zNh/QX7w/K3guVvRcD6CfsjWL9gfxrWH7A/E9ZfsD8wfxPmb8L8TZi/CfM3Yf4mzN+E+ZswfxPmb8L8FcxfwfwVzF/B/BXMX8H8FcxfwfwVzF/B/C2YvwXzt2D+FszfgvlbMH8L5m/B/C2YvwXzt2H+NszfhvnbMH8b5m/D/G2Yvw3zt2H+NszfAfN3wPwdMH8HzN8B83fA/B0wfwfM3wHzd8D8nTB/J8zfCfN3wvydMH8nzN8J83fC/J0wfyfM3wXzd8H8XTB/F8xfeH9V8P6q4P1VwfurgvdXBe+vCt5fFby/Knh/VfD+quD9VcH7q4L3VwXvrwreXxW8v2p4f9Xw/qrh/VXD+6s+FuxPw/oD9mfC+gv2h+Vvw/urRvdX5w9/XH65vnx/c3V3fvL9Z19PH+6vb0+PH+///PzPT87f/Qs=","file_map":{"46":{"source":"// Define the data structures\nstruct Share {\n    x: u64,\n    y: [u64; 32],\n}\n\nfn main(\n    secret: [u64; 32], // Array of 32 secret integers\n    a1: [u64; 32] // Array of first coefficients for each secret\n) -> pub [Share; 3] {\n    // Verify each secret value is in valid range\n    for i in 0..32 {\n        assert(secret[i] < 7919);\n    }\n\n    // Create array to store all shares\n    let mut shares: [Share; 3] = [\n        Share { x: 0, y: [0; 32] },\n        Share { x: 0, y: [0; 32] },\n        Share { x: 0, y: [0; 32] }\n    ];\n\n    // Generate shares for each x value\n    shares[0] = create_share_array(1, secret, a1);\n    shares[1] = create_share_array(2, secret, a1);\n    shares[2] = create_share_array(3, secret, a1);\n\n    shares\n}\n\nfn create_share_array(x: u64, secret: [u64; 32], a1: [u64; 32]) -> Share {\n    let x_field = x;\n\n    let mut y_values: [u64; 32] = [0; 32];\n\n    // Create share for each secret value\n    for i in 0..32 {\n        // Evaluate polynomial f(x) = secret + a1*x for each secret\n        y_values[i] = secret[i] + \n                      (a1[i] * x_field); // 2 threshold\n    }\n\n    Share { x: x_field, y: y_values }\n}\n","path":"/Users/anoy/Documents/Hackathon Projects/fusion-circuits/shamir_generate_2_3/src/main.nr"}},"names":["main"]}